/* Copyright 2011 MaidSafe.net limited

This MaidSafe Software is licensed under the MaidSafe.net Commercial License, version 1.0 or later,
and The General Public License (GPL), version 3. By contributing code to this project You agree to
the terms laid out in the MaidSafe Contributor Agreement, version 1.0, found in the root directory
of this project at LICENSE, COPYING and CONTRIBUTOR respectively and also available at:

http://www.novinet.com/license

Unless required by applicable law or agreed to in writing, software distributed under the License is
distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied. See the License for the specific language governing permissions and limitations under the
License.
*/

#ifndef MAIDSAFE_DRIVE_SHARE_KEYS_H_
#define MAIDSAFE_DRIVE_SHARE_KEYS_H_

#include <set>
#include <string>
#include <vector>

#include "boost/filesystem/path.hpp"
#include "boost/thread/mutex.hpp"

#include "maidsafe/common/rsa.h"

#include "maidsafe/drive/config.h"


namespace fs = boost::filesystem;

namespace maidsafe {

namespace drive {

struct ShareData {
 public:
  ShareData(const ShareId& share_id_in,
            const std::string& inviter_id_in,
            const fs::path& share_root_dir_in,
            const asymm::Keys& keyring_in)
      : share_id(share_id_in),
        inviter_id(inviter_id_in),
        share_root_dir(share_root_dir_in),
        share_right(kShareReadOnly),
        keyring(keyring_in) {}
  ShareData(const ShareId& share_id_in,
            const std::string& inviter_id_in,
            const fs::path& share_root_dir_in,
            const asymm::Keys& keyring_in,
            const int share_right_in)
      : share_id(share_id_in),
        inviter_id(inviter_id_in),
        share_root_dir(share_root_dir_in),
        share_right(share_right_in),
        keyring(keyring_in) {}
  ShareData() : share_id(),
                inviter_id(),
                share_root_dir(),
                share_right(kShareReadOnly),
                keyring() {}
  ShareData(const ShareData& other)
      : share_id(other.share_id),
        inviter_id(other.inviter_id),
        share_root_dir(other.share_root_dir),
        share_right(other.share_right),
        keyring(other.keyring) {}
  ShareData& operator=(const ShareData& other) {
    share_id = other.share_id;
    inviter_id = other.inviter_id;
    share_root_dir = other.share_root_dir;
    share_right = other.share_right;
    keyring = other.keyring;
    return *this;
  }
  bool operator<(const ShareData& other) const {
    return share_id < other.share_id;
  }
  ShareId share_id;
  std::string inviter_id;
  fs::path share_root_dir;
  int share_right;  // 0 for read only, 1 for read/write, 2 for owner
  asymm::Keys keyring;
};


class ShareKeys {
 public:
  ShareKeys();
  ~ShareKeys();
  bool Init(const std::string& serialised_shares);
  // Adds share_data and if successful returns the updated serialised shares_
  // set, else an empty string.
  bool Add(const ShareData& share_data, std::string& serialised_shares);
  bool Get(const ShareId& share_id, ShareData& share_data);
  void GetAll(std::vector<ShareData>& all_shares);
  // Deletes data associated with share_id and if successful returns the updated
  // serialised shares_ set, else an empty string.
  bool Delete(const ShareId& share_id, std::string& serialised_shares);
  void Clear();

 private:
  bool Serialise(std::string& serialised_shares) const;
  std::set<ShareData> shares_data_;
  boost::mutex mutex_;
};

}  // namespace drive

}  // namespace maidsafe

#endif  // MAIDSAFE_DRIVE_SHARE_KEYS_H_

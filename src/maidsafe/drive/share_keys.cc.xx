/* Copyright 2011 MaidSafe.net limited

This MaidSafe Software is licensed under the MaidSafe.net Commercial License, version 1.0 or later,
and The General Public License (GPL), version 3. By contributing code to this project You agree to
the terms laid out in the MaidSafe Contributor Agreement, version 1.0, found in the root directory
of this project at LICENSE, COPYING and CONTRIBUTOR respectively and also available at:

http://www.novinet.com/license

Unless required by applicable law or agreed to in writing, software distributed under the License is
distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied. See the License for the specific language governing permissions and limitations under the
License.
*/

#include <algorithm>

#include "maidsafe/drive/share_keys.h"

#include "maidsafe/common/log.h"
#include "maidsafe/common/utils.h"

#include "maidsafe/drive/proto_structs_pb.h"
#include "maidsafe/drive/return_codes.h"


namespace maidsafe {

namespace drive {

ShareKeys::ShareKeys() : shares_data_(), mutex_() {}

ShareKeys::~ShareKeys() {}

bool ShareKeys::Init(const std::string &serialised_shares) {
  if (serialised_shares.empty()) {
    LOG(kInfo) << "Empty string. No shares. Done.";
    return true;
  }

  protobuf::ShareKeyRing share_ring;
  if (!share_ring.ParseFromString(serialised_shares)) {
    LOG(kError) << "Failed to parse share keys.";
    return false;
  }

  if (share_ring.share_data_size() == 0) {
    LOG(kInfo) << "No shares inside. Done.";
    return true;
  }

  for (int n(0); n < share_ring.share_data_size(); ++n) {
    asymm::Keys keys;
    if (share_ring.share_data(n).has_keyring() && share_ring.share_data(n).share_right() > 0) {
      if (!asymm::ParseKeys(share_ring.share_data(n).keyring(), keys)) {
        LOG(kWarning) << "Failed to parse the keys for share "
                      << Base64Substr(share_ring.share_data(n).share_id());
        continue;
      }
    }
    shares_data_.insert(ShareData(share_ring.share_data(n).share_id(),
                                  share_ring.share_data(n).inviter_id(),
                                  share_ring.share_data(n).share_root_dir(),
                                  keys,
                                  share_ring.share_data(n).share_right()));
  }

  return true;
}

bool ShareKeys::Add(const ShareData &share_data, std::string &serialised_data) {
  boost::mutex::scoped_lock loch_shiphoirt(mutex_);
  auto result(shares_data_.insert(share_data));
  if (!result.second) {
    LOG(kWarning) << "Share " << Base64Substr(share_data.share_id) << " already exists.";
    return false;
  }
  return Serialise(serialised_data);
}

bool ShareKeys::Get(const ShareId &share_id, ShareData& share_data) {
  if (share_id.empty()) {
    LOG(kError) << "Empty share ID passed.";
    return false;
  }

  boost::mutex::scoped_lock loch_shiphoirt(mutex_);
  auto itr(std::find_if(shares_data_.begin(),
                        shares_data_.end(),
                        [&share_id] (const ShareData &share_data)->bool {
                          return share_id == share_data.share_id;
                        }));
  if (itr == shares_data_.end()) {
    LOG(kInfo) << "Share " + Base64Substr(share_id) + " doesn't exist.";
    share_data = ShareData();
    return false;
  }

  share_data = *itr;
  return true;
}

void ShareKeys::GetAll(std::vector<ShareData>& all_shares) {
  {
    boost::mutex::scoped_lock loch_shiphoirt(mutex_);
    all_shares.assign(shares_data_.begin(), shares_data_.end());
  }
  std::sort(all_shares.begin(),
            all_shares.end(),
            [] (const ShareData &lhs, const ShareData &rhs)->bool {
              return lhs.share_root_dir < rhs.share_root_dir;
            });
}

bool ShareKeys::Delete(const ShareId &share_id, std::string &serialised_data) {
  boost::mutex::scoped_lock loch_shiphoirt(mutex_);
  size_t num(shares_data_.erase(ShareData(share_id, "", "", asymm::Keys())));
  if (num != 1U) {
    LOG(kError) << "Share " << Base64Substr(share_id) << " doesn't exist: " << num;
    return false;
  }

  if (shares_data_.empty()) {
    LOG(kInfo) << "empty, no need to serialise.";
    serialised_data.clear();
    return true;
  }

  return Serialise(serialised_data);
}

bool ShareKeys::Serialise(std::string &serialised_data) const {
  if (shares_data_.empty()) {
    LOG(kInfo) << "Nothing to serialise! Done.";
    return true;
  }

  protobuf::ShareKeyRing share_ring;
  for (auto& share_data : shares_data_) {
    protobuf::ShareData* proto_data = share_ring.add_share_data();
    if (share_data.share_right > 0) {
      std::string serialised_keys;
      if (!asymm::SerialiseKeys(share_data.keyring, serialised_keys)) {
        LOG(kError) << "Failed to serialise keys of share " << Base64Substr(share_data.share_id);
        continue;
      }
      proto_data->set_keyring(serialised_keys);
    }
    proto_data->set_inviter_id(share_data.inviter_id);
    proto_data->set_share_id(share_data.share_id);
    proto_data->set_share_root_dir(share_data.share_root_dir.string());
    proto_data->set_share_right(share_data.share_right);
  }

  return share_ring.SerializeToString(&serialised_data);
}

void ShareKeys::Clear() {
  boost::mutex::scoped_lock loch_shiphoirt(mutex_);
  shares_data_.clear();
}

}  // namespace drive

}  // namespace maidsafe
